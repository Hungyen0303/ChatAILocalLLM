import json
import re
from typing import Dict

from attr import dataclass
from llm_processor import llm
from llama_cpp import Any, List, Optional

@dataclass
class ActionPlan:
    task_description: str = ""
    steps: List[Dict[str, Any]] = None
    expected_output: str = ""
    recommendations: Optional[str] = None
    def __init__(self, json_data: Dict[str, Any]):
        self.task_description: str = json_data.get("task_description", "")
        self.steps: List[Dict[str, Any]] = json_data.get("steps", [])
        self.expected_output: str = json_data.get("expected_output", "")
        self.recommendations: Optional[str] = json_data.get("recommendations", None)

    def __str__(self):
        result = f"üìå Task: {self.task_description}\n"
        for step in self.steps:
            result += (
                f"üëâ B∆∞·ªõc {step.get('step')}: {step.get('description')} "
                f"({step.get('function')})\n"
            )
        result += f"üéØ K·∫øt qu·∫£ mong ƒë·ª£i: {self.expected_output}"
        return result
    
def get_prompt(user_input: str) -> str:
    return f"""
[INST]
B·∫°n l√† m·ªôt AI Assistant t·∫°o k·∫ø ho·∫°ch h√†nh ƒë·ªông. Tr·∫£ v·ªÅ **ch·ªâ m·ªôt JSON object**, kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n, gi·∫£i th√≠ch, markdown, hay k√Ω t·ª± n√†o ngo√†i JSON.

**QUY T·∫ÆC**:
- JSON ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng {{ v√† k·∫øt th√∫c b·∫±ng }}
- Kh√¥ng th√™m d√≤ng tr·ªëng, comment, ho·∫∑c b·∫•t k·ª≥ n·ªôi dung n√†o ngo√†i JSON
- N·∫øu h√†nh ƒë·ªông kh√¥ng thu·ªôc danh s√°ch FUNCTIONS, s·ª≠ d·ª•ng "general"
- "general" lu√¥n l√† b∆∞·ªõc cu·ªëi c√πng (n·∫øu c·∫ßn thi·∫øt , n·∫øu function c√≥ ƒë√°p ·ª©ng ƒë·ªß th√¨ kh√¥ng c·∫ßn b∆∞·ªõc n√†y)
- N·∫øu t·ªìn t·∫°i c√°c b∆∞·ªõc classify_by_topic ho·∫∑c classify, kh√¥ng c·∫ßn b∆∞·ªõc search
- M·ªói b∆∞·ªõc ph·∫£i c√≥: step (s·ªë), description (m√¥ t·∫£), function (t√™n h√†m), parameters (object, c√≥ th·ªÉ r·ªóng), required_data (array)
- Ch·ªâ s·ª≠ d·ª•ng c√°c h√†m do ng∆∞·ªùi d√πng y√™u c·∫ßu, kh√¥ng t·ª± ƒë·ªông th√™m b∆∞·ªõc n√†o kh√°c. 
- 
**FUNCTIONS C√ì S·∫¥N**:
- scan: Qu√©t n·ªôi dung file ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt
- read: ƒê·ªçc n·ªôi dung file
- write: Ghi/t·∫°o file m·ªõi
- classify: Y√™u c·∫ßu Ph√¢n lo·∫°i t·∫•t c·∫£ file theo n·ªôi dung ho·∫∑c metadata 
- classify_by_topic : Ph√¢n lo·∫°i file theo ch·ªß ƒë·ªÅ
- search: T√¨m ki·∫øm file theo t√™n ho·∫∑c n·ªôi dung, ch·ªâ th·ª±c hi·ªán khi ng∆∞·ªùi d√πng y√™u c·∫ßu v√† c√≥ t·ª´ kh√≥a r√µ r√†ng, n·∫øu c√≥ classify_by_topic ho·∫∑c classify th√¨ kh√¥ng c·∫ßn b∆∞·ªõc n√†y
- export : Xu·∫•t d·ªØ li·ªáu , meta ra ƒë·ªãnh d·∫°ng
- general: Th·ª±c hi·ªán c√°c t√°c v·ª• chung kh√°c
JSON **b·∫Øt bu·ªôc ph·∫£i c√≥ ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng sau**:
task_description: m√¥ t·∫£ ng·∫Øn g·ªçn y√™u c·∫ßu ng∆∞·ªùi d√πng
steps: danh s√°ch c√°c b∆∞·ªõc h√†nh ƒë·ªông theo y√™u c·∫ßu
expected_output: k·∫øt qu·∫£ ƒë·∫ßu ra m√† ng∆∞·ªùi d√πng mong mu·ªën
recommendations: g·ª£i √Ω th√™m c√°c ch·ª©c nƒÉng ho·∫∑c h√†nh ƒë·ªông h·ªØu √≠ch 
**V√ç D·ª§**:
Y√™u c·∫ßu: So s√°nh file marketing 2024 v√† 2025
{{
  "task_description": "So s√°nh file marketing 2024 v√† 2025",
  "steps": [
    {{
      "step": 1,
      "description": "T√¨m file marketing 2024",
      "function": "search",
      "parameters": {{"query": "marketing 2024"}},
      "required_data": ["file marketing 2024"]
    }},
    {{
      "step": 2,
      "description": "T√¨m file marketing 2025",
      "function": "search",
      "parameters": {{"query": "marketing 2025"}},
      "required_data": ["file marketing 2025"]
    }},
    {{
      "step": 3,
      "description": "So s√°nh n·ªôi dung hai file",
      "function": "general",
      "parameters": {{}},
      "required_data": ["so s√°nh chi ti·∫øt"]
    }}
  ],
  "expected_output": "B√°o c√°o so s√°nh marketing 2024 vs 2025",
  "recommendations": "B·∫°n c√≥ th·ªÉ th√™m b∆∞·ªõc ph√¢n lo·∫°i file theo ch·ªß ƒë·ªÅ n·∫øu c·∫ßn thi·∫øt."
}}

**Y√™u c·∫ßu ng∆∞·ªùi d√πng**:
"{user_input}"

**JSON Output**:
[/INST]
"""
def extract_json_from_text(text: str) -> Optional[str]:
    json_pattern = r'\{[\s\S]*\}'
    match = re.search(json_pattern, text, re.DOTALL)
    
    if not match:
        return None
    
    json_str = match.group(0)
    json_str = json_str.strip()
    if json_str.startswith("```json"):
        json_str = json_str[7:].rstrip("```").strip()
    
    try:
        json.loads(json_str)
        return json_str
    except json.JSONDecodeError:
        return None
def get_json_response(user_input: str, max_retries: int = 3) -> Optional[ActionPlan]:
    prompt = get_prompt(user_input)
    
    for attempt in range(max_retries):
        try:
            output = llm.create_chat_completion(
                messages=[{"role": "user", "content": prompt}],
                max_tokens=2048,
                temperature=0.0,
            )
            
            raw_output = output["choices"][0]["message"]["content"]
            print(f"raw_output: {raw_output}")
            json_text = extract_json_from_text(raw_output)
            if json_text:
                parsed = json.loads(json_text)
                action_plan =  ActionPlan(**parsed)
                return action_plan
            else:
                print(f"‚ö†Ô∏è Th·ª≠ {attempt + 1}/{max_retries}: Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Th·ª≠ {attempt + 1}/{max_retries}: L·ªói - {e}")
            
    return None

# H√†m fallback
def fallback_json_response(user_input: str) -> Optional[ActionPlan]:
    simple_prompt = f"""
[INST]
Tr·∫£ v·ªÅ **ch·ªâ m·ªôt JSON object** cho k·∫ø ho·∫°ch h√†nh ƒë·ªông d·ª±a tr√™n y√™u c·∫ßu: "{user_input}".
Kh√¥ng th√™m vƒÉn b·∫£n, gi·∫£i th√≠ch, ho·∫∑c markdown. JSON ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng {{ v√† k·∫øt th√∫c b·∫±ng }}.
V√≠ d·ª•: {{"task_description": "V√≠ d·ª•", "steps": [], "expected_output": "K·∫øt qu·∫£"}}
[/INST]
"""
    try:
        output = llm.create_chat_completion(
            messages=[{"role": "user", "content": simple_prompt}],
            max_tokens=512,
            temperature=0.0,
        )
        
        raw_output = output["choices"][0]["message"]["content"]
        json_text = extract_json_from_text(raw_output)
        
        if json_text:
            parsed = json.loads(json_text)
            return ActionPlan(parsed)
        return None
    except Exception as e:
        print(f"‚ùå Fallback error: {e}")
        return None
    

