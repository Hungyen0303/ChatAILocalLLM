import gradio as gr
import pandas as pd
from llm_processor import process_prompt, process_prompt_alternative


#Nam thu·∫≠n s·ª≠a ph·∫ßn n√†y nha , xong thay v√†o h√†m query ·ªü d∆∞·ªõi 
def process_query(query):
    results = [
        {"filename": "marketing_plan.pdf", "label": "Nh√≥m A"},
        {"filename": "sales_strategy.docx", "label": "Nh√≥m B"}
    ]
    df = pd.DataFrame(results)
    response = f"üîç ƒê√£ t√¨m th·∫•y {len(results)} t·ªáp kh·ªõp v·ªõi: '{query}'"
    return response, df


# Nam thu·∫≠n
def chat_interface(query, filename=None, new_label=None):
    if filename and new_label:
        return update_label(filename, new_label), None
    response, df = process_query(query)
    return response, df


# T·∫•n sang s·ª≠a kh√∫c n√†y 
def update_label(filename, new_label):
    return f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t nh√£n cho `{filename}` th√†nh **{new_label}**"




# Nh√°p ƒë·ªÉ query th·ª≠ LLM 
def chat_interface2(query):
    """
    X·ª≠ l√Ω c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ LLM.
    """
    if not query:
        return "Vui l√≤ng nh·∫≠p c√¢u h·ªèi!"
    
    try:
        response = process_prompt(query)
    except:
        response = process_prompt_alternative(query)
    
    return response
# CSS t√πy ch·ªânh giao di·ªán
css = """
body {
    font-family: 'Segoe UI', sans-serif;
    background-color: #f4f6f8;
    color: #333;
}
.gradio-container {
    max-width: 850px;
    margin: auto;
    padding: 30px;
    background: #ffffff;
    border-radius: 16px;
    box-shadow: 0 8px 20px rgba(0,0,0,0.08);
}
#chat-input {
    border-radius: 12px;
    border: 1px solid #d0d7de;
    padding: 12px;
    font-size: 16px;
    background-color: #fefefe;
}
#result-table {
    background-color: #ffffff;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    font-size: 15px;
}
#submit-btn, #update-btn {
    background-color: #2563eb;
    color: white;
    border-radius: 8px;
    padding: 10px 24px;
    font-weight: 600;
    border: none;
    transition: background-color 0.3s ease;
}
#submit-btn:hover, #update-btn:hover {
    background-color: #1e40af;
}
"""

def run_ui():
    with gr.Blocks(theme=gr.themes.Soft(), css=css) as demo:
        gr.Markdown("## ü§ñ Chat AI T√¨m ki·∫øm & Ph√¢n lo·∫°i File")
        gr.Markdown("Nh·∫≠p c√¢u h·ªèi b√™n d∆∞·ªõi ƒë·ªÉ t√¨m ki·∫øm file ho·∫∑c c·∫≠p nh·∫≠t nh√£n cho t·ªáp d·ªØ li·ªáu.")

        with gr.Column():
            with gr.Row():
                query_input = gr.Textbox(
                    label="üîé Nh·∫≠p c√¢u h·ªèi",
                    placeholder="VD: T√¨m file c√≥ t·ª´ kh√≥a 'k·∫ø ho·∫°ch 2024'",
                    elem_id="chat-input"
                )
                submit_btn = gr.Button("T√¨m ki·∫øm", elem_id="submit-btn")

            output_text = gr.Textbox(label="üìã K·∫øt qu·∫£", interactive=False)
            output_table = gr.DataFrame(label="üìÅ Danh s√°ch t·ªáp t√¨m ƒë∆∞·ª£c", elem_id="result-table", interactive=False)

        gr.Markdown("---")
        gr.Markdown("### üõ†Ô∏è C·∫≠p nh·∫≠t nh√£n cho t·ªáp (RLHF)")

        with gr.Row():
            filename_input = gr.Textbox(label="T√™n t·ªáp", placeholder="VD: marketing_plan.pdf", elem_id="filename-input")
            label_input = gr.Textbox(label="Nh√£n m·ªõi", placeholder="VD: Nh√≥m A", elem_id="label-input")
            update_btn = gr.Button("C·∫≠p nh·∫≠t nh√£n", elem_id="update-btn")

        submit_btn.click(
            fn=chat_interface2,
            inputs=[query_input],
            outputs=[output_text]
        )

        update_btn.click(
            fn=chat_interface,
            inputs=[query_input, filename_input, label_input],
            outputs=[output_text, output_table]
        )

        demo.launch()