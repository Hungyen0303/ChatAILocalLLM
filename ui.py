import gradio as gr
import os
import logging
from agentic_ai import process_prompt_agent
from llm_processor import process_prompt

logger = logging.getLogger(__name__)

def chat_with_llm(message, history):
    """Simple chat interface with LLM"""
    try:
        # Process with simplified LLM processor
        history.append({"role": "user", "content": message})
        response = process_prompt_agent(message)
        
        # Add to history using messages format
        history.append({"role": "assistant", "content": response})
        
        return history, ""
        
    except Exception as e:
        logger.error(f"Chat error: {e}")
        error_msg = f"L·ªói x·ª≠ l√Ω: {str(e)}"
        history.append({"role": "user", "content": message})
        history.append({"role": "assistant", "content": error_msg})
        return history, ""

def create_interface():
    """Create modern and visually appealing Gradio interface"""
    
    # Custom CSS for modern look
    custom_css = """
    /* Main container styling */
    .gradio-container {
        max-width: 1200px !important;
        margin: 0 auto !important;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        min-height: 100vh !important;
    }
    
    /* Header styling */
    .header-section {
        background: rgba(255, 255, 255, 0.95) !important;
        padding: 30px !important;
        border-radius: 15px !important;
        margin: 20px 0 !important;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1) !important;
        backdrop-filter: blur(10px) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
    }
    
    .header-section h1 {
        color: #2c3e50 !important;
        font-size: 2.5em !important;
        font-weight: 700 !important;
        margin-bottom: 10px !important;
        text-align: center !important;
    }
    
    .header-section p {
        color: #34495e !important;
        font-size: 1.2em !important;
        text-align: center !important;
        margin-bottom: 20px !important;
    }
    
    /* Features grid */
    .features-grid {
        display: grid !important;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)) !important;
        gap: 15px !important;
        margin-top: 20px !important;
    }
    
    .feature-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        color: white !important;
        padding: 15px !important;
        border-radius: 10px !important;
        text-align: center !important;
        font-weight: 500 !important;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1) !important;
    }
    
    /* Chat container */
    .chat-container {
        background: rgba(255, 255, 255, 0.95) !important;
        border-radius: 15px !important;
        padding: 20px !important;
        margin: 20px 0 !important;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1) !important;
        backdrop-filter: blur(10px) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
    }
    
    /* Chatbot styling */
    .chatbot {
        height: 500px !important;
        border-radius: 10px !important;
        border: 2px solid #e3f2fd !important;
        background: #fafafa !important;
    }
    
    /* Input section */
    .input-section {
        background: rgba(255, 255, 255, 0.95) !important;
        padding: 20px !important;
        border-radius: 15px !important;
        margin: 20px 0 !important;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1) !important;
    }
    
    /* Textbox styling */
    .textbox input {
        border-radius: 25px !important;
        border: 2px solid #e3f2fd !important;
        padding: 12px 20px !important;
        font-size: 16px !important;
        transition: all 0.3s ease !important;
    }
    
    .textbox input:focus {
        border-color: #667eea !important;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1) !important;
        outline: none !important;
    }
    
    /* Button styling */
    .primary-btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        border: none !important;
        border-radius: 25px !important;
        padding: 12px 30px !important;
        color: white !important;
        font-weight: 600 !important;
        font-size: 16px !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3) !important;
    }
    
    .primary-btn:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4) !important;
    }
    
    .secondary-btn {
        background: #95a5a6 !important;
        border: none !important;
        border-radius: 25px !important;
        padding: 10px 25px !important;
        color: white !important;
        font-weight: 500 !important;
        transition: all 0.3s ease !important;
    }
    
    .secondary-btn:hover {
        background: #7f8c8d !important;
        transform: translateY(-1px) !important;
    }
    
    /* Footer section */
    .footer-section {
        background: rgba(255, 255, 255, 0.9) !important;
        padding: 20px !important;
        border-radius: 15px !important;
        margin: 20px 0 !important;
        text-align: center !important;
        color: #7f8c8d !important;
    }
    
    /* Responsive design */
    @media (max-width: 768px) {
        .gradio-container {
            margin: 10px !important;
            max-width: 100% !important;
        }
        
        .header-section h1 {
            font-size: 2em !important;
        }
        
        .features-grid {
            grid-template-columns: 1fr !important;
        }
    }
    """
    
    with gr.Blocks(
        title="Chat AI Local LLM - Document Management",
        css=custom_css,
        theme=gr.themes.Soft()
    ) as demo:
        
        # Header Section
        with gr.Row(elem_classes=["header-section"]):
            gr.HTML("""
            <div>
                <h1>ü§ñ Document Management System</h1>
                <p><strong>Chat AI Local LLM v·ªõi MCP Filesystem</strong></p>
                <div class="features-grid">
                    <div class="feature-card">T√¨m ki·∫øm th√¥ng minh</div>
                    <div class="feature-card">Qu√©t th∆∞ m·ª•c t·ª± ƒë·ªông</div>
                    <div class="feature-card">Ph√¢n lo·∫°i file</div>
                    <div class="feature-card">Xu·∫•t metadata</div>
                    <div class="feature-card">Chat t·ª± nhi√™n</div>
                </div>
            </div>
            """)
        
        # Chat Section
        with gr.Row(elem_classes=["chat-container"]):
            with gr.Column():
                gr.Markdown("### üí¨ Giao di·ªán Chat")
                
                # Chat interface with messages format
                chatbot = gr.Chatbot(
                    label="",
                    elem_classes=["chatbot"],
                    show_label=False,
                    height=500,
                    type="messages",
                    placeholder="Ch∆∞a c√≥ tin nh·∫Øn n√†o. H√£y b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán!"
                )
        
        # Input Section
        with gr.Row(elem_classes=["input-section"]):
            with gr.Column(scale=1):
                gr.Markdown("### ‚úèÔ∏è Nh·∫≠p tin nh·∫Øn")
                
                with gr.Row():
                    msg = gr.Textbox(
                        label="",
                        placeholder="Nh·∫≠p c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu... (VD: t√¨m file python, qu√©t th∆∞ m·ª•c)",
                        scale=4,
                        elem_classes=["textbox"],
                        show_label=False
                    )
                    submit_btn = gr.Button(
                        "üì§ G·ª≠i", 
                        scale=1, 
                        variant="primary",
                        elem_classes=["primary-btn"]
                    )
                
                with gr.Row():
                    gr.Examples(
                        examples=[
                            "T√¨m file c√≥ t·ª´ python",
                            "Qu√©t th∆∞ m·ª•c v√† hi·ªÉn th·ªã file",
                            "Ph√¢n lo·∫°i t·∫•t c·∫£ file",
                            "Ph√¢n lo·∫°i c√°c file li√™n quan ƒë·∫øn t√†i ch√≠nh",
                            "Xu·∫•t metadata ƒë·ªÉ backup",
                            "C√≥ file n√†o v·ªÅ machine learning kh√¥ng?" , 
                            "H√£y so s√°nh hai file marketing-2024.docx v√† marketing-2025.docx",
                            "T√¥i kh√¥ng mu·ªën b·∫°n g·ª£i √Ω hay recommend trong c√¢u tr·∫£ l·ªùi cho nh·ªØng l·∫ßn tr·∫£ l·ªùi sau",
                        ],
                        inputs=msg,
                        label="üí° V√≠ d·ª• c√¢u h·ªèi:"
                    )
                    
                    clear_btn = gr.Button(
                        "üóëÔ∏è X√≥a l·ªãch s·ª≠", 
                        elem_classes=["secondary-btn"]
                    )
        
        # Event handlers
        msg.submit(
            chat_with_llm,
            inputs=[msg, chatbot],
            outputs=[chatbot, msg]
        )
        
        submit_btn.click(
            chat_with_llm,
            inputs=[msg, chatbot],
            outputs=[chatbot, msg]
        )
        
        clear_btn.click(
            lambda: ([], ""),
            outputs=[chatbot, msg]
        )
        
        # Footer Section
        with gr.Row(elem_classes=["footer-section"]):
            gr.Markdown("""
            ---
            **üéØ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**
            
            ‚Ä¢ **T√¨m ki·∫øm:** "t√¨m file python" ho·∫∑c "c√≥ file n√†o v·ªÅ AI"
            
            ‚Ä¢ **Qu√©t th∆∞ m·ª•c:** "qu√©t th∆∞ m·ª•c" ho·∫∑c "hi·ªÉn th·ªã danh s√°ch file"
            
            ‚Ä¢ **Ph√¢n lo·∫°i:** "ph√¢n lo·∫°i file" ho·∫∑c "s·∫Øp x·∫øp t√†i li·ªáu"
            
            ‚Ä¢ **Xu·∫•t d·ªØ li·ªáu:** "xu·∫•t metadata" ho·∫∑c "backup file info"
            
            H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ph√°t hi·ªán √Ω ƒë·ªãnh v√† th·ª±c hi·ªán y√™u c·∫ßu c·ªßa b·∫°n! üöÄ
            """)
    
    return demo

def run_ui():
    """Run the web interface"""
    logger.info("Starting web interface...")
    
    try:
        demo = create_interface()
        
        demo.launch(
            server_name="0.0.0.0",
            server_port=7860,
            share=False,
            show_error=True,
            quiet=False
        )
        
    except Exception as e:
        logger.error(f"Failed to start web interface: {e}")
        raise

if __name__ == "__main__":
    run_ui()